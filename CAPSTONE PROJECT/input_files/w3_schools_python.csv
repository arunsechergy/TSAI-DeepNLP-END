,Question,Code
0,"Print ""Hello World""","print(""Hello, World!"")
"
1,Comments in Python,"#This is a comment.
print(""Hello, World!"")
"
2,Docstrings,"""""""This is a
multiline docstring.""""""
print(""Hello, World!"")
"
3,Create a variable,"x = 5
y = ""John""
print(x)
print(y)
"
4,Output both text and a variable,"x = ""awesome""
print(""Python is "" + x)
"
5,Add a variable to another variable,"x = ""Python is ""
y = ""awesome""
z = x + y
print(z)
"
6,Verify the type of an object,"x = 1
y = 2.8
z = 1j

print(type(x))
print(type(y))
print(type(z))
"
7,Create integers,"x = 1
y = 35656222554887711
z = -3255522

print(type(x))
print(type(y))
print(type(z))
"
8,Create floating point numbers,"x = 1.10
y = 1.0
z = -35.59

print(type(x))
print(type(y))
print(type(z))
"
9,"Create scientific numbers with an ""e"" to indicate the power of 10","x = 35e3
y = 12E4
z = -87.7e100

print(type(x))
print(type(y))
print(type(z))
"
10,Create complex numbers,"x = 3+5j
y = 5j
z = -5j

print(type(x))
print(type(y))
print(type(z))
"
11,Casting - Integers,"x = int(1)
y = int(2.8)
z = int(""3"")
print(x)
print(y)
print(z)
"
12,Casting - Floats,"x = float(1)
y = float(2.8)
z = float(""3"")
w = float(""4.2"")
print(x)
print(y)
print(z)
print(w)
"
13,Casting - Strings,"x = str(""s1"")
y = str(2)
z = str(3.0)
print(x)
print(y)
print(z)
"
14,Get the character at position 1 of a string,"a = ""Hello, World!""
print(a[1])
"
15,Substring. Get the characters from position 2 to position 5 (not included),"b = ""Hello, World!""
print(b[2:5])
"
16,Remove whitespace from the beginning or at the end of a string,"a = "" Hello, World! ""
print(a.strip())
"
17,Return the length of a string,"a = ""Hello, World!""
print(len(a))
"
18,Convert a string to lower case,"a = ""Hello, World!""
print(a.lower())
"
19,Convert a string to upper case,"a = ""Hello, World!""
print(a.upper())
"
20,Replace a string with another string,"a = ""Hello, World!""
print(a.replace(""H"", ""J""))
"
21,Split a string into substrings,"a = ""Hello, World!""
b = a.split("","")
print(b)
"
22,Addition operator,"x = 5
y = 3

print(x + y)
"
23,Subtraction operator,"x = 5
y = 3

print(x - y)
"
24,Multiplication operator,"x = 5
y = 3

print(x * y)
"
25,Division operator,"x = 12
y = 3

print(x / y)
"
26,Modulus operator,"x = 5
y = 2

print(x % y)
"
27,Assignment operator,"x = 5

print(x)
"
28,Create a list,"thislist = [""apple"", ""banana"", ""cherry""]
print(thislist)
"
29,Access list items,"thislist = [""apple"", ""banana"", ""cherry""]
print(thislist[1])
"
30,Change the value of a list item,"thislist = [""apple"", ""banana"", ""cherry""]
thislist[1] = ""blackcurrant""

print(thislist)
"
31,Loop through a list,"thislist = [""apple"", ""banana"", ""cherry""]
for x in thislist:
  print(x)
"
32,Check if a list item exists,"thislist = [""apple"", ""banana"", ""cherry""]
if ""apple"" in thislist:
  print(""Yes, 'apple' is in the fruits list"")
"
33,Get the length of a list,"thislist = [""apple"", ""banana"", ""cherry""]
print(len(thislist))
"
34,Add an item to the end of a list,"thislist = [""apple"", ""banana"", ""cherry""]

thislist.append(""orange"")

print(thislist)
"
35,Add an item at a specified index,"thislist = [""apple"", ""banana"", ""cherry""]
thislist.insert(1, ""orange"")
print(thislist)
"
36,Remove an item,"thislist = [""apple"", ""banana"", ""cherry""]
thislist.remove(""banana"")
print(thislist)
"
37,Remove the last item,"thislist = [""apple"", ""banana"", ""cherry""]
thislist.pop()
print(thislist)
"
38,Remove an item at a specified index,"thislist = [""apple"", ""banana"", ""cherry""]
del thislist[0]
print(thislist)
"
39,Empty a list,"thislist = [""apple"", ""banana"", ""cherry""]
thislist.clear()
print(thislist)
"
40,Using the list() constructor to make a list,"thislist = list((""apple"", ""banana"", ""cherry""))
print(thislist)
"
41,Create a tuple,"thistuple = (""apple"", ""banana"", ""cherry"")
print(thistuple)
"
42,Access tuple items,"thistuple = (""apple"", ""banana"", ""cherry"")
print(thistuple[1])
"
43,Change tuple values,"thistuple = (""apple"", ""banana"", ""cherry"")
thistuple[1] = ""blackcurrant""

# the value is still the same:
print(thistuple)
"
44,Loop through a tuple,"thistuple = (""apple"", ""banana"", ""cherry"")
for x in thistuple:
  print(x)
"
45,Check if a tuple item exists,"thistuple = (""apple"", ""banana"", ""cherry"")
if ""apple"" in thistuple:
  print(""Yes, 'apple' is in the fruits tuple"")
"
46,Get the length of a tuple,"thistuple = (""apple"", ""banana"", ""cherry"")
print(len(thistuple))
"
47,Delete a tuple,"thistuple = (""apple"", ""banana"", ""cherry"")
del thistuple
print(thistuple) #this will raise an error because the tuple no longer exists
"
48,Using the tuple() constructor to create a tuple,"thistuple = tuple((""apple"", ""banana"", ""cherry""))
print(thistuple)
"
49,Create a set,"thisset = {""apple"", ""banana"", ""cherry""}
print(thisset)

# Note: the set list is unordered, meaning: the items will appear in a random order.

# Refresh this page to see the change in the result.
"
50,Loop through a set,"thisset = {""apple"", ""banana"", ""cherry""}

for x in thisset:
  print(x)
"
51,Check if an item exists,"thisset = {""apple"", ""banana"", ""cherry""}

print(""banana"" in thisset)
"
52,Add an item to a set,"thisset = {""apple"", ""banana"", ""cherry""}

thisset.add(""orange"")

print(thisset)
"
53,Add multiple items to a set,"thisset = {""apple"", ""banana"", ""cherry""}

thisset.update([""orange"", ""mango"", ""grapes""])

print(thisset)
"
54,Get the length of a set,"thisset = {""apple"", ""banana"", ""cherry""}

print(len(thisset))
"
55,Remove an item in a set,"thisset = {""apple"", ""banana"", ""cherry""}

thisset.remove(""banana"")

print(thisset)
"
56,Remove an item in a set by using the discard() method,"thisset = {""apple"", ""banana"", ""cherry""}

thisset.discard(""banana"")

print(thisset)
"
57,Remove the last item in a set by using the pop() method,"thisset = {""apple"", ""banana"", ""cherry""}

x = thisset.pop()

print(x) #removed item

print(thisset) #the set after removal
"
58,Empty a set,"thisset = {""apple"", ""banana"", ""cherry""}

thisset.clear()

print(thisset)
"
59,Delete a set,"thisset = {""apple"", ""banana"", ""cherry""}

del thisset

print(thisset) #this will raise an error because the set no longer exists
"
60,Using the set() constructor to create a set,"thisset = set((""apple"", ""banana"", ""cherry""))
print(thisset)
# Note: the set list is unordered, so the result will display the items in a random order.
"
61,Create a dictionary,"thisdict =	{
  ""brand"": ""Ford"",
  ""model"": ""Mustang"",
  ""year"": 1964
}
print(thisdict)
"
62,Access the items of a dictionary,"thisdict =	{
  ""brand"": ""Ford"",
  ""model"": ""Mustang"",
  ""year"": 1964
}
x = thisdict[""model""]
print(x)
"
63,Change the value of a specific item in a dictionary,"thisdict =	{
  ""brand"": ""Ford"",
  ""model"": ""Mustang"",
  ""year"": 1964
}

thisdict[""year""] = 2018

print(thisdict)
"
64,"Print all key names in a dictionary, one by one","thisdict =	{
  ""brand"": ""Ford"",
  ""model"": ""Mustang"",
  ""year"": 1964
}
for x in thisdict:
  print(x)
"
65,"Print all values in a dictionary, one by one","thisdict =	{
  ""brand"": ""Ford"",
  ""model"": ""Mustang"",
  ""year"": 1964
}
for x in thisdict:
  print(thisdict[x])
"
66,Using the values() function to return values of a dictionary,"thisdict =	{
  ""brand"": ""Ford"",
  ""model"": ""Mustang"",
  ""year"": 1964
}
for x in thisdict.values():
  print(x)
"
67,"Loop through both keys an values, by using the items() function","thisdict =	{
  ""brand"": ""Ford"",
  ""model"": ""Mustang"",
  ""year"": 1964
}
for x, y in thisdict.items():
  print(x, y)
"
68,Check if a key exists,"thisdict = {
  ""brand"": ""Ford"",
  ""model"": ""Mustang"",
  ""year"": 1964
}
if ""model"" in thisdict:
  print(""Yes, 'model' is one of the keys in the thisdict dictionary"")
"
69,Get the length of a dictionary,"thisdict =	{
  ""brand"": ""Ford"",
  ""model"": ""Mustang"",
  ""year"": 1964
}

print(len(thisdict))
"
70,Add an item to a dictionary,"thisdict =	{
  ""brand"": ""Ford"",
  ""model"": ""Mustang"",
  ""year"": 1964
}
thisdict[""color""] = ""red""
print(thisdict)
"
71,Remove an item from a dictionary,"thisdict =	{
  ""brand"": ""Ford"",
  ""model"": ""Mustang"",
  ""year"": 1964
}
thisdict.pop(""model"")
print(thisdict)
"
72,Empty a dictionary,"thisdict =	{
  ""brand"": ""Ford"",
  ""model"": ""Mustang"",
  ""year"": 1964
}
thisdict.clear()
print(thisdict)
"
73,Using the dict() constructor to create a dictionary,"thisdict = dict(brand=""Ford"", model=""Mustang"", year=1964)
# note that keywords are not string literals
# note the use of equals rather than colon for the assignment
print(thisdict)
"
74,The if statement,"a = 33
b = 200

if b > a:
  print(""b is greater than a"")
"
75,The elif statement,"a = 33
b = 33
if b > a:
  print(""b is greater than a"")
elif a == b:
  print(""a and b are equal"")
"
76,The else statement,"a = 200
b = 33
if b > a:
  print(""b is greater than a"")
elif a == b:
  print(""a and b are equal"")
else:
  print(""a is greater than b"")
"
77,Short hand if,"a = 200
b = 33

if a > b: print(""a is greater than b"")
"
78,Short hand if ... else,"a = 2
b = 330

print(""A"") if a > b else print(""B"")
"
79,The and keyword,"a = 200
b = 33
c = 500
if a > b and c > a:
  print(""Both conditions are True"")
"
80,The or keyword,"a = 200
b = 33
c = 500
if a > b or a > c:
  print(""At least one of the conditions is True"")
"
81,The while loop,"i = 1
while i < 6:
  print(i)
  i += 1
"
82,Using the break statement in a while loop,"i = 1
while i < 6:
  print(i)
  if (i == 3):
    break
  i += 1
"
83,Using the continue statement in a while loop,"i = 0
while i < 6:
  i += 1
  if i == 3:
    continue
  print(i)

# Note that number 3 is missing in the result
"
84,The for loop,"fruits = [""apple"", ""banana"", ""cherry""]
for x in fruits:
  print(x) 
"
85,Loop through a string,"for x in ""banana"":
  print(x) 
"
86,Using the break statement in a for loop,"fruits = [""apple"", ""banana"", ""cherry""]
for x in fruits:
  print(x) 
  if x == ""banana"":
    break
"
87,Using the continue statement in a for loop,"fruits = [""apple"", ""banana"", ""cherry""]
for x in fruits:
  if x == ""banana"":
    continue
  print(x) 
"
88,Using the range() function in a for loop,"for x in range(6):
  print(x) 
"
89,Else in for loop,"for x in range(6):
  print(x)
else:
  print(""Finally finished!"")
"
90,Nested for loop,"adj = [""red"", ""big"", ""tasty""]
fruits = [""apple"", ""banana"", ""cherry""]

for x in adj:
  for y in fruits:
    print(x, y)
"
91,Create and call a function,"def my_function():
  print(""Hello from a function"")

my_function()
"
92,Function parameters,"def my_function(fname):
  print(fname + "" Refsnes"")

my_function(""Emil"")
my_function(""Tobias"")
my_function(""Linus"")
"
93,Default parameter value,"def my_function(country = ""Norway""):
  print(""I am from "" + country)

my_function(""Sweden"")
my_function(""India"")
my_function()
my_function(""Brazil"")
"
94,Let a function return a value,"def my_function(x):
  return 5 * x

print(my_function(3))
print(my_function(5))
print(my_function(9))
"
95,Recursion,"def tri_recursion(k):
  if(k > 0):
    result = k + tri_recursion(k - 1)
    print(result)
  else:
    result = 0
  return result

print(""\n\nRecursion Example Results"")
tri_recursion(6)
"
96,A lambda function that adds 10 to the number passed in as an argument,"x = lambda a: a + 10
print(x(5))
"
97,A lambda function that multiplies argument a with argument b,"x = lambda a, b: a * b
print(x(5, 6))
"
98,"A lambda function that sums argument a, b, and c","x = lambda a, b, c: a + b + c
print(x(5, 6, 2))
"
99,Create an array,"cars = [""Ford"", ""Volvo"", ""BMW""]

print(cars)
"
100,Access the elements of an array,"cars = [""Ford"", ""Volvo"", ""BMW""]

x = cars[0]

print(x)
"
101,Change the value of an array element,"cars = [""Ford"", ""Volvo"", ""BMW""]

cars[0] = ""Toyota""

print(cars)
"
102,Get the length of an array,"cars = [""Ford"", ""Volvo"", ""BMW""]

x = len(cars)

print(x)
"
103,Loop through all elements of an array,"cars = [""Ford"", ""Volvo"", ""BMW""]

for x in cars:
  print(x)
"
104,Add an element to an array,"cars = [""Ford"", ""Volvo"", ""BMW""]

cars.append(""Honda"")

print(cars)
"
105,Remove an element from an array,"cars = [""Ford"", ""Volvo"", ""BMW""]

cars.pop(1)

print(cars)
"
106,Create a class,"class MyClass:
  x = 5

print(MyClass)
"
107,Create an object,"class MyClass:
  x = 5

p1 = MyClass()
print(p1.x)
"
108,The __init__() Function,"class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

p1 = Person(""John"", 36)

print(p1.name)
print(p1.age)
"
109,Create object methods,"class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def myfunc(self):
    print(""Hello my name is "" + self.name)

p1 = Person(""John"", 36)
p1.myfunc()
"
110,The self parameter,"class Person:
  def __init__(mysillyobject, name, age):
    mysillyobject.name = name
    mysillyobject.age = age

  def myfunc(abc):
    print(""Hello my name is "" + abc.name)

p1 = Person(""John"", 36)
p1.myfunc()
"
111,Modify object properties,"class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def myfunc(self):
    print(""Hello my name is "" + self.name)

p1 = Person(""John"", 36)

p1.age = 40

print(p1.age)
"
112,Delete object properties,"class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def myfunc(self):
    print(""Hello my name is "" + self.name)

p1 = Person(""John"", 36)

del p1.age

print(p1.age)
"
113,Delete an object,"class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def myfunc(self):
    print(""Hello my name is "" + self.name)

p1 = Person(""John"", 36)

del p1

print(p1)
"
114,Return an iterator from a tuple,"mytuple = (""apple"", ""banana"", ""cherry"")
myit = iter(mytuple)

print(next(myit))
print(next(myit))
print(next(myit))
"
115,Return an iterator from a string,"mystr = ""banana""
myit = iter(mystr)

print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
"
116,Loop through an iterator,"mytuple = (""apple"", ""banana"", ""cherry"")

for x in mytuple:
  print(x)
"
117,Create an iterator,"class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self):
    x = self.a
    self.a += 1
    return x

myclass = MyNumbers()
myiter = iter(myclass)

print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
"
118,Stop iteration,"class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self):
    if self.a <= 20:
      x = self.a
      self.a += 1
      return x
    else:
      raise StopIteration

myclass = MyNumbers()
myiter = iter(myclass)

for x in myiter:
  print(x)
"
119,Use a module,"import mymodule

mymodule.greeting(""Jonathan"")
"
120,Variables in module,"import mymodule

a = mymodule.person1[""age""]
print(a)
"
121,Re-naming a module,"import mymodule as mx

a = mx.person1[""age""]
print(a)
"
122,Built-in modules,"import platform

x = platform.system()
print(x)
"
123,Using the dir() function,"import platform

x = dir(platform)
print(x)
"
124,Import from module,"from mymodule import person1

print(person1[""age""])
"
125,Import the datetime module and display the current date,"import datetime

x = datetime.datetime.now()

print(x)
"
126,Return the year and name of weekday,"import datetime

x = datetime.datetime.now()

print(x.year)
print(x.strftime(""%A""))
"
127,Create a date object,"import datetime

x = datetime.datetime(2020, 5, 17)

print(x)
"
128,The strftime() Method,"import datetime

x = datetime.datetime(2018, 6, 1)

print(x.strftime(""%B""))
"
129,Find the lowest and highest value in an iterable,"x = min(5, 10, 25)
y = max(5, 10, 25)

print(x)
print(y)
"
130,Return the absolute value of a number,"x = abs(-7.25)

print(x)
"
131,Return the value of x to the power of y (x,"x = pow(4, 3)

print(x)
"
132,Return the square root of a number,"import math

x = math.sqrt(64)

print(x)
"
133,Round a number upwards and downwards to its nearest integer,"#Import math library
import math

#Round a number upward to its nearest integer
x = math.ceil(1.4)

#Round a number downward to its nearest integer
y = math.floor(1.4)

print(x)
print(y)
"
134,Return the value of PI,"import math

x = math.pi

print(x)
"
135,Convert from JSON to Python,"import json

# some JSON:
x = '{ ""name"":""John"", ""age"":30, ""city"":""New York""}'

# parse x:
y = json.loads(x)

# the result is a Python dictionary:
print(y[""age""])
"
136,Convert from Python to JSON,"import json

# a Python object (dict):
x = {
  ""name"": ""John"",
  ""age"": 30,
  ""city"": ""New York""
}

# convert into JSON:
y = json.dumps(x)

# the result is a JSON string:
print(y)
"
137,Convert Python objects into JSON strings,"import json

print(json.dumps({""name"": ""John"", ""age"": 30}))
print(json.dumps([""apple"", ""bananas""]))
print(json.dumps((""apple"", ""bananas"")))
print(json.dumps(""hello""))
print(json.dumps(42))
print(json.dumps(31.76))
print(json.dumps(True))
print(json.dumps(False))
print(json.dumps(None))
"
138,Convert a Python object containing all the legal data types,"import json

x = {
  ""name"": ""John"",
  ""age"": 30,
  ""married"": True,
  ""divorced"": False,
  ""children"": (""Ann"",""Billy""),
  ""pets"": None,
  ""cars"": [
    {""model"": ""BMW 230"", ""mpg"": 27.5},
    {""model"": ""Ford Edge"", ""mpg"": 24.1}
  ]
}

# convert into JSON:
y = json.dumps(x)

# the result is a JSON string:
print(y)
"
139,Use the indent parameter to define the numbers of indents,"import json

x = {
  ""name"": ""John"",
  ""age"": 30,
  ""married"": True,
  ""divorced"": False,
  ""children"": (""Ann"",""Billy""),
  ""pets"": None,
  ""cars"": [
    {""model"": ""BMW 230"", ""mpg"": 27.5},
    {""model"": ""Ford Edge"", ""mpg"": 24.1}
  ]
}

# use four indents to make it easier to read the result:
print(json.dumps(x, indent=4))
"
140,Use the separators parameter to change the default separator,"import json

x = {
  ""name"": ""John"",
  ""age"": 30,
  ""married"": True,
  ""divorced"": False,
  ""children"": (""Ann"",""Billy""),
  ""pets"": None,
  ""cars"": [
    {""model"": ""BMW 230"", ""mpg"": 27.5},
    {""model"": ""Ford Edge"", ""mpg"": 24.1}
  ]
}

# use . and a space to separate objects, and a space, a = and a space to separate keys from their values:
print(json.dumps(x, indent=4, separators=("". "", "" = "")))
"
141,Use the sort_keys parameter to specify if the result should be sorted or not,"import json

x = {
  ""name"": ""John"",
  ""age"": 30,
  ""married"": True,
  ""divorced"": False,
  ""children"": (""Ann"",""Billy""),
  ""pets"": None,
  ""cars"": [
    {""model"": ""BMW 230"", ""mpg"": 27.5},
    {""model"": ""Ford Edge"", ""mpg"": 24.1}
  ]
}

# sort the result alphabetically by keys:
print(json.dumps(x, indent=4, sort_keys=True))
"
142,"Search a string to see if it starts with ""The"" and ends with ""Spain""","import re

#Check if the string starts with ""The"" and ends with ""Spain"":

txt = ""The rain in Spain""
x = re.search(""^The.*Spain$"", txt)

if x:
  print(""YES! We have a match!"")
else:
  print(""No match"")
"
143,Using the findall() function,"import re

#Return a list containing every occurrence of ""ai"":

txt = ""The rain in Spain""
x = re.findall(""ai"", txt)
print(x)
"
144,Using the search() function,"import re

txt = ""The rain in Spain""
x = re.search(""\s"", txt)

print(""The first white-space character is located in position:"", x.start()) 
"
145,Using the split() function,"import re

#Split the string at every white-space character:

txt = ""The rain in Spain""
x = re.split(""\s"", txt)
print(x)
"
146,Using the sub() function,"import re

#Replace all white-space characters with the digit ""9"":

txt = ""The rain in Spain""
x = re.sub(""\s"", ""9"", txt)
print(x)
"
147,Using a package,"import camelcase

c = camelcase.CamelCase()

txt = ""lorem ipsum dolor sit amet""

print(c.hump(txt))

#This method capitalizes the first letter of each word.
"
148,"When an error occurs, print a message","#The try block will generate an error, because x is not defined:

try:
  print(x)
except:
  print(""An exception occurred"")
"
149,Many exceptions,"#The try block will generate a NameError, because x is not defined:

try:
  print(x)
except NameError:
  print(""Variable x is not defined"")
except:
  print(""Something else went wrong"")
"
150,Use the else keyword to define a block of code to be executed if no errors were raised,"#The try block does not raise any errors, so the else block is executed:

try:
  print(""Hello"")
except:
  print(""Something went wrong"")
else:
  print(""Nothing went wrong"")
"
151,Use the finally block to execute code regardless if the try block raises an error or not,"#The finally block gets executed no matter if the try block raises any errors or not:

try:
  print(x)
except:
  print(""Something went wrong"")
finally:
  print(""The 'try except' is finished"")
"
152,Read a file,"f = open(""demofile.txt"", ""r"")

print(f.read())
"
153,Read only parts of a file,"f = open(""demofile.txt"", ""r"")

print(f.read(5))
"
154,Read one line of a file,"f = open(""demofile.txt"", ""r"")

print(f.readline())
"
155,"Loop through the lines of a file to read the whole file, line by line","f = open(""demofile.txt"", ""r"")
for x in f:
  print(x)
"
156,Create a connection to a database,"import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""myusername"",
  password=""mypassword""
)

print(mydb)
"
157,Create a database in MySQL,"import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""myusername"",
  password=""mypassword""
)

mycursor = mydb.cursor()

mycursor.execute(""CREATE DATABASE mydatabase"")

#If this page is executed with no error, you have successfully created a database.
"
158,Check if a database exist,"import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""myusername"",
  password=""mypassword""
)

mycursor = mydb.cursor()

mycursor.execute(""SHOW DATABASES"")

for x in mycursor:
  print(x)
"
159,Create a table,"import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""myusername"",
  password=""mypassword"",
  database=""mydatabase""
)

mycursor = mydb.cursor()

mycursor.execute(""CREATE TABLE customers (name VARCHAR(255), address VARCHAR(255))"")

#If this page is executed with no error, you have successfully created a table named ""customers"".
"
160,Check if a table exist,"import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""myusername"",
  password=""mypassword"",
  database=""mydatabase""
)

mycursor = mydb.cursor()

mycursor.execute(""SHOW TABLES"")

for x in mycursor:
     print(x)
"
161,Create primary key when creating a table,"import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""yourusername"",
  password=""yourpassword"",
  database=""mydatabase""
)

mycursor = mydb.cursor()

mycursor.execute(""CREATE TABLE customers (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255), address VARCHAR(255))"")

#If this page is executed with no error, the table ""customers"" now has a primary key
"
162,Insert a record in a table,"import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""myusername"",
  password=""mypassword"",
  database=""mydatabase""
)

mycursor = mydb.cursor()

sql = ""INSERT INTO customers (name, address) VALUES (%s, %s)""
val = (""John"", ""Highway 21"")

mycursor.execute(sql, val)

mydb.commit()

print(mycursor.rowcount, ""record inserted."")
"
163,Insert multiple rows,"import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""myusername"",
  password=""mypassword"",
  database=""mydatabase""
)

mycursor = mydb.cursor()

sql = ""INSERT INTO customers (name, address) VALUES (%s, %s)""
val = [
 ('Peter', 'Lowstreet 4'),
 ('Amy', 'Apple st 652'),
 ('Hannah', 'Mountain 21'),
 ('Michael', 'Valley 345'),
 ('Sandy', 'Ocean blvd 2'),
 ('Betty', 'Green Grass 1'),
 ('Richard', 'Sky st 331'),
 ('Susan', 'One way 98'),
 ('Vicky', 'Yellow Garden 2'),
 ('Ben', 'Park Lane 38'),
 ('William', 'Central st 954'),
 ('Chuck', 'Main Road 989'),
 ('Viola', 'Sideway 1633')
]

mycursor.executemany(sql, val)

mydb.commit()

print(mycursor.rowcount, ""record was inserted."")
"
164,Get inserted ID,"import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""myusername"",
  password=""mypassword"",
  database=""mydatabase""
)

mycursor = mydb.cursor()

sql = ""INSERT INTO customers (name, address) VALUES (%s, %s)""
val = (""Michelle"", ""Blue Village"")
mycursor.execute(sql, val)

mydb.commit()

print(""1 record inserted, ID:"", mycursor.lastrowid)
"
165,Select all records from a table,"import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""myusername"",
  password=""mypassword"",
  database=""mydatabase""
)

mycursor = mydb.cursor()

mycursor.execute(""SELECT * FROM customers"")

myresult = mycursor.fetchall()

for x in myresult:
  print(x)
"
166,Select only some of the columns in a table,"import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""myusername"",
  password=""mypassword"",
  database=""mydatabase""
)

mycursor = mydb.cursor()

mycursor.execute(""SELECT name, address FROM customers"")

myresult = mycursor.fetchall()

for x in myresult:
  print(x)
"
167,Use the fetchone() method to fetch only one row in a table,"import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""myusername"",
  password=""mypassword"",
  database=""mydatabase""
)

mycursor = mydb.cursor()

mycursor.execute(""SELECT * FROM customers"")

myresult = mycursor.fetchone()

print(myresult)
"
168,Select with a filter,"import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""myusername"",
  password=""mypassword"",
  database=""mydatabase""
)

mycursor = mydb.cursor()

sql = ""SELECT * FROM customers WHERE address = 'Park Lane 38'""

mycursor.execute(sql)

myresult = mycursor.fetchall()

for x in myresult:
  print(x)
"
169,Wildcards characters,"import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""myusername"",
  password=""mypassword"",
  database=""mydatabase""
)

mycursor = mydb.cursor()

sql = ""SELECT * FROM customers WHERE address Like '%way%'""

mycursor.execute(sql)

myresult = mycursor.fetchall()

for x in myresult:
  print(x)
"
170,Prevent SQL injection,"import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""myusername"",
  password=""mypassword"",
  database=""mydatabase""
)

mycursor = mydb.cursor()

sql = ""SELECT * FROM customers WHERE address = %s""
adr = (""Yellow Garden 2"", )

mycursor.execute(sql, adr)

myresult = mycursor.fetchall()

for x in myresult:
  print(x)
"
171,Sort the result of a table alphabetically,"import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""myusername"",
  password=""mypassword"",
  database=""mydatabase""
)

mycursor = mydb.cursor()

sql = ""SELECT * FROM customers ORDER BY name""

mycursor.execute(sql)

myresult = mycursor.fetchall()

for x in myresult:
  print(x)
"
172,Sort the result in a descending order (reverse alphabetically),"import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""myusername"",
  password=""mypassword"",
  database=""mydatabase""
)

mycursor = mydb.cursor()

sql = ""SELECT * FROM customers ORDER BY name DESC""

mycursor.execute(sql)

myresult = mycursor.fetchall()

for x in myresult:
  print(x)
"
173,Delete records from an existing table,"import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""myusername"",
  password=""mypassword"",
  database=""mydatabase""
)

mycursor = mydb.cursor()

sql = ""DELETE FROM customers WHERE address = 'Mountain 21'""

mycursor.execute(sql)

mydb.commit()

print(mycursor.rowcount, ""record(s) deleted"")
"
174,Prevent SQL injection,"import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""myusername"",
  password=""mypassword"",
  database=""mydatabase""
)

mycursor = mydb.cursor()

sql = ""DELETE FROM customers WHERE address = %s""
adr = (""Yellow Garden 2"", )

mycursor.execute(sql, adr)

mydb.commit()

print(mycursor.rowcount, ""record(s) deleted"")
"
175,Delete an existing table,"import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""myusername"",
  password=""mypassword"",
  database=""mydatabase""
)

mycursor = mydb.cursor()

sql = ""DROP TABLE customers""

mycursor.execute(sql)

#If this page was executed with no error(s), you have successfully deleted the ""customers"" table.
"
176,Delete a table if it exist,"import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""myusername"",
  password=""mypassword"",
  database=""mydatabase""
)

mycursor = mydb.cursor()

sql = ""DROP TABLE IF EXISTS customers""

mycursor.execute(sql)

#If this page was executed with no error(s), you have successfully deleted the ""customers"" table.
"
177,Update existing records in a table,"import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""myusername"",
  password=""mypassword"",
  database=""mydatabase""
)

mycursor = mydb.cursor()

sql = ""UPDATE customers SET address = 'Canyon 123' WHERE address = 'Valley 345'""

mycursor.execute(sql)

mydb.commit()

print(mycursor.rowcount, ""record(s) affected"")
"
178,Prevent SQL injection,"import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""myusername"",
  password=""mypassword"",
  database=""mydatabase""
)

mycursor = mydb.cursor()

sql = ""UPDATE customers SET address = %s WHERE address = %s""
val = (""Valley 345"", ""Canyon 123"")

mycursor.execute(sql, val)

mydb.commit()

print(mycursor.rowcount, ""record(s) affected"")
"
179,Limit the number of records returned from a query,"import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""myusername"",
  password=""mypassword"",
  database=""mydatabase""
)

mycursor = mydb.cursor()

mycursor.execute(""SELECT * FROM customers LIMIT 5"")

myresult = mycursor.fetchall()

for x in myresult:
  print(x)
"
180,"Combine rows from two or more tables, based on a related column between them","import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""myusername"",
  password=""mypassword"",
  database=""mydatabase""
)

mycursor = mydb.cursor()

sql = ""SELECT \
  users.name AS user, \
  products.name AS favorite \
  FROM users \
  INNER JOIN products ON users.fav = products.id""

mycursor.execute(sql)

myresult = mycursor.fetchall()

for x in myresult:
  print(x)
"
181,LEFT JOIN,"import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""myusername"",
  password=""mypassword"",
  database=""mydatabase""
)

mycursor = mydb.cursor()

sql = ""SELECT \
  users.name AS user, \
  products.name AS favorite \
  FROM users \
  LEFT JOIN products ON users.fav = products.id""

mycursor.execute(sql)

myresult = mycursor.fetchall()

for x in myresult:
  print(x)
"
182,RIGHT JOIN,"import mysql.connector

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""myusername"",
  password=""mypassword"",
  database=""mydatabase""
)

mycursor = mydb.cursor()

sql = ""SELECT \
  users.name AS user, \
  products.name AS favorite \
  FROM users \
  RIGHT JOIN products ON users.fav = products.id""

mycursor.execute(sql)

myresult = mycursor.fetchall()

for x in myresult:
  print(x)
"
183,Create a database,"import pymongo

myclient = pymongo.MongoClient('mongodb://localhost:27017/')

mydb = myclient['mydatabase']

# database created!
"
184,Check if a database exist,"import pymongo

myclient = pymongo.MongoClient('mongodb://localhost:27017/')

print(myclient.list_database_names())
"
185,Create a collection,"import pymongo

myclient = pymongo.MongoClient('mongodb://localhost:27017/')

mydb = myclient['mydatabase']

mycol = mydb[""customers""]

# collection created!
"
186,Check if a collection exist,"import pymongo

myclient = pymongo.MongoClient('mongodb://localhost:27017/')

mydb = myclient['mydatabase']

mycol = mydb[""customers""]

print(mydb.list_collection_names())
"
187,Insert into collection,"import pymongo

myclient = pymongo.MongoClient('mongodb://localhost:27017/')
mydb = myclient['mydatabase']
mycol = mydb[""customers""]

mydict = { ""name"": ""John"", ""address"": ""Highway 37"" }

x = mycol.insert_one(mydict)

print(x)
"
188,Return the id field,"import pymongo

myclient = pymongo.MongoClient('mongodb://localhost:27017/')
mydb = myclient['mydatabase']
mycol = mydb[""customers""]

mydict = { ""name"": ""Peter"", ""address"": ""Lowstreet 27"" }

x = mycol.insert_one(mydict)

print(x.inserted_id)
"
189,Insert multiple documents,"import pymongo

myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")
mydb = myclient[""mydatabase""]
mycol = mydb[""customers""]

mylist = [
  { ""name"": ""Amy"", ""address"": ""Apple st 652""},
  { ""name"": ""Hannah"", ""address"": ""Mountain 21""},
  { ""name"": ""Michael"", ""address"": ""Valley 345""},
  { ""name"": ""Sandy"", ""address"": ""Ocean blvd 2""},
  { ""name"": ""Betty"", ""address"": ""Green Grass 1""},
  { ""name"": ""Richard"", ""address"": ""Sky st 331""},
  { ""name"": ""Susan"", ""address"": ""One way 98""},
  { ""name"": ""Vicky"", ""address"": ""Yellow Garden 2""},
  { ""name"": ""Ben"", ""address"": ""Park Lane 38""},
  { ""name"": ""William"", ""address"": ""Central st 954""},
  { ""name"": ""Chuck"", ""address"": ""Main Road 989""},
  { ""name"": ""Viola"", ""address"": ""Sideway 1633""}
]

x = mycol.insert_many(mylist)

#print list of the _id values of the inserted documents:

print(x.inserted_ids)
"
190,Insert multiple documents with specified IDs,"import pymongo

myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")
mydb = myclient[""mydatabase""]
mycol = mydb[""customers""]

mylist = [
  { ""_id"": 1, ""name"": ""John"", ""address"": ""Highway 37""},
  { ""_id"": 2, ""name"": ""Peter"", ""address"": ""Lowstreet 27""},
  { ""_id"": 3, ""name"": ""Amy"", ""address"": ""Apple st 652""},
  { ""_id"": 4, ""name"": ""Hannah"", ""address"": ""Mountain 21""},
  { ""_id"": 5, ""name"": ""Michael"", ""address"": ""Valley 345""},
  { ""_id"": 6, ""name"": ""Sandy"", ""address"": ""Ocean blvd 2""},
  { ""_id"": 7, ""name"": ""Betty"", ""address"": ""Green Grass 1""},
  { ""_id"": 8, ""name"": ""Richard"", ""address"": ""Sky st 331""},
  { ""_id"": 9, ""name"": ""Susan"", ""address"": ""One way 98""},
  { ""_id"": 10, ""name"": ""Vicky"", ""address"": ""Yellow Garden 2""},
  { ""_id"": 11, ""name"": ""Ben"", ""address"": ""Park Lane 38""},
  { ""_id"": 12, ""name"": ""William"", ""address"": ""Central st 954""},
  { ""_id"": 13, ""name"": ""Chuck"", ""address"": ""Main Road 989""},
  { ""_id"": 14, ""name"": ""Viola"", ""address"": ""Sideway 1633""}
]

x = mycol.insert_many(mylist)

#print a list of the _id values of the inserted documents:
print(x.inserted_ids)
"
191,Find the first document in the selection,"import pymongo

myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")
mydb = myclient[""mydatabase""]
mycol = mydb[""customers""]

x mycol.find_one()

print(x)
"
192,Find all documents in the selection,"import pymongo

myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")
mydb = myclient[""mydatabase""]
mycol = mydb[""customers""]

for x in mycol.find():
  print(x)
"
193,Find only some fields,"import pymongo

myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")
mydb = myclient[""mydatabase""]
mycol = mydb[""customers""]

for x in mycol.find({},{ ""_id"": 0, ""name"": 1, ""address"": 1 }):
  print(x)
"
194,Filter the result,"import pymongo

myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")
mydb = myclient[""mydatabase""]
mycol = mydb[""customers""]

myquery = { ""address"": ""Park Lane 38"" }

mydoc = mycol.find(myquery)

for x in mydoc:
  print(x)
"
195,Advanced query,"import pymongo

myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")
mydb = myclient[""mydatabase""]
mycol = mydb[""customers""]

#address greater than S:
myquery = { ""address"": {""$gt"": ""S""} }

mydoc = mycol.find(myquery)

for x in mydoc:
  print(x)
"
196,Filter with regular expressions,"import pymongo

myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")
mydb = myclient[""mydatabase""]
mycol = mydb[""customers""]

#address starts with S:
myquery = { ""address"": { ""$regex"": ""^S"" } }

mydoc = mycol.find(myquery)

for x in mydoc:
  print(x)
"
197,Sort the result alphabetically,"import pymongo

myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")
mydb = myclient[""mydatabase""]
mycol = mydb[""customers""]

mydoc = mycol.find().sort(""name"")

for x in mydoc:
  print(x)


"
198,Sort the result descending (reverse alphabetically),"import pymongo

myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")
mydb = myclient[""mydatabase""]
mycol = mydb[""customers""]

mydoc = mycol.find().sort(""name"", -1)

for x in mydoc:
  print(x)


"
199,Delete document,"import pymongo

myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")
mydb = myclient[""mydatabase""]
mycol = mydb[""customers""]

myquery = { ""address"": ""Mountain 21"" }

mycol.delete_one(myquery)


#print the customers collection after the deletion:
for x in mycol.find():
  print(x)
"
200,Delete many documents,"import pymongo

myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")
mydb = myclient[""mydatabase""]
mycol = mydb[""customers""]

myquery = { ""address"": {""$regex"": ""^S""} }

x = mycol.delete_many(myquery)

print(x.deleted_count, ""documents deleted"")
"
201,Delete all documents in a collection,"import pymongo

myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")
mydb = myclient[""mydatabase""]
mycol = mydb[""customers""]

x = mycol.delete_many({})

print(x.deleted_count, ""documents deleted"")
"
202,Delete a collection,"import pymongo

myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")
mydb = myclient[""mydatabase""]
mycol = mydb[""customers""]

mycol.drop()
"
203,Update a document,"import pymongo

myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")
mydb = myclient[""mydatabase""]
mycol = mydb[""customers""]

myquery = { ""address"": ""Valley 345"" }
newvalues = { ""$set"": { ""address"": ""Canyon 123"" } }

mycol.update_one(myquery, newvalues)

#print ""customers"" after the update:
for x in mycol.find():
  print(x)
"
204,Update many/all documents,"import pymongo

myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")
mydb = myclient[""mydatabase""]
mycol = mydb[""customers""]

myquery = { ""address"": { ""$regex"": ""^S"" } }

newvalues = { ""$set"": { ""name"": ""Minnie"" } }

x = mycol.update_many(myquery, newvalues)

print(x.modified_count, ""documents updated."")
"
205,Limit the result,"import pymongo

myclient = pymongo.MongoClient(""mongodb://localhost:27017/"")
mydb = myclient[""mydatabase""]
mycol = mydb[""customers""]

myresult = mycol.find().limit(5)

#print the result:
for x in myresult:
  print(x)
"
